This was supposed to be a JIT, but it's just a compiler.
The only backend is amd64 at the moment, using the System V calling convention.

The language itself is still very limited, but shouldn't be too hard to
extend. The backend (boring) stuff is implemented (CFG building, liveness
analysis, interfence graph building, register allocation...)

```
fun printf(string fmt) int variadic;

fun mult(int a, int b) int {
        let int ret = 0;
        for (let int i = 1; i != b + 1; i = i + 1)
                ret = ret + a;
        rof
        return ret;
}

fun fact(int n) int {
        let int ret = 1;
        for (let int i = 1; i != n + 1; i = i + 1)
                ret = mult(ret, i);
        rof
        return ret;
}

fun main(int argc) int {
        for (let int i = 0; i != argc; i = i + 1)
                printf("%lld\n", fact(i));
        rof

        return argc + 42;
}
```
